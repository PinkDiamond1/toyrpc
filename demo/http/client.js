const jayson = require('jayson')
const fetch = require('node-fetch');
const req = (request) => {
  return fetch('http://localhost:3012', {
    method: 'POST',
    body: request,
    headers: { 'Content-Type': 'application/json', },
    body: JSON.stringify(request)
  }).then((res) => { return res.json() })
};
const run = async (method, params, id) => {
  let payload = { "jsonrpc": "2.0", "method": method, "id": id }
  if (params) payload.params = params
  let res = await req(payload)
  if (res.error) {
    console.log("Error", res.error)
  } else {
    console.log("Result:", method, params, res.result)
  }
};
const Test = {
  read: async () => {
    let id=0;
    await run("get", null, id++)
    await run("count", ["utxo"], id++)
    await run("count", ["all"], id++)
  },
  add: async () => {
    for(let i=0; i<100; i++) {
      await run("add", {
        v: 1,
        out: [{
          "o0": "OP_0", "o1": "OP_RETURN", "s2": "Hello world"
        }],
        edge: { in: 1, out: 2 }
      }, 0)
    }
  },
  clone: async () => {
    await run("count", ["utxo"], 0)
    await run("count", ["all"], 0)
    await run("clone", {
      tx: "010000000c88d7f0a1afe22f55a03d4dd2f0559b167c4734c592bb88bbcd07ef97a12e2007020000006b483045022100a3f9abe822e8b29d8db83230e8d3d4f0156727ac7b2ce6881340e7ba9decd91202204bafe0a4e0cf3a6299bef82672cfa3e2ca7ff369c83649e94013223eb4ab75bc4121027f5f0f8a3cf5bf19cb5fbf173cf6969802f41e23993e416235d20414866a5151ffffffff4b63a02339c415ecd764f126e090de14dd100cd7c3a954cb27e20d585a9d252d020000006b48304502210083e87edbff74ec0fa7f00cf3db2f39a6133488f72cd9b7f69b0ce7cfeac4a23f022052f40340fef02d30cea31110481fc36856295138bd913341329cc41ca98e600a41210386a68604f4f02c48d550d2642ef72581856651c9518f1b0a3f2242a4a9966e02ffffffff57191072f55c8600b1556d4d84a9c8e54fcbb15b8a7a0b8e3f085fc660811e30010000006a4730440220601c1f7f7eb2b9ed17514bda2e034e7265ff149c28dc6c764ac413edb21991f10220272992da3dd3542dd0f7ab2ce4762bb1c47bc62da149c7e2645d4f3649acb5084121020448a7e9b5b0a0243acd87a924e576b1818a09be049bf8c3cda6cf19fe9875e3fffffffff893dc68b723970596f128ea8c118d4cb03a06430dbdfbfd2a4f35f0d84c9235020000006b483045022100b0e6dd0cc020307baae4511f889e3b9cc4ced4e7f8e3ca1d3a92bf89312afde4022035fddae8d9fb5f8ac1a17adc32a3872b6d78893b8c7924963ec2008679e0546d41210262c6cefed7e9b79e1e8af0ce7b9f440ca22f091d840702497adcf52a86056d69ffffffff68c4b5358f545286fae66f477639e8d6878a5e29f179c36c9bccd84cc4db0542020000006a473044022073048e4a3fce3a6a6200e2166feed680670ec4773efc51e52498950cf059b7e702202aee2dec262a333940eb3eac7acd621a22779eb50c17d8555b62a1584f7e1576412103206aa7eed2d5cb72c37c5e0a3b78dc4cc528a7a348f45012bf6329325b149de5ffffffff538466c8b3b2f9af9745b4d00b45a402d9f3b2b5e1d390e52f8f79319d60d756020000006a473044022045e7b3ce3c026174666f7a4abf45c6bed75a8c307f75a0f97867ecbd0236ec80022042e9534c42c2162bc31ef6e569f75cad17dfb964d56419903cfb6476136b7850412103d03eeb86dafb581100a625892b00261095474d3652bdf064b9f6576f3c053ddbffffffff575905962c0acaafb769dab1799f581f4897187d1665fbcbf3d1f50887d5ef69020000006b483045022100bd023ee714f592a9dadb27d245610bd08d97669fd5be390a426eac31445d38ad02206093dd415f2f6ef2ac1bcee206cf77e594ea1082a1b359fcc5e9b4d7f0dac5b44121037d4eaf3d571658549e62cd0d824821863b319256e3d33d883ddc6b616e083aa2ffffffff21f830ce3b4b8beaabad250f1ab895b6ef5fbdff901720b5c416a518491f6496010000006a473044022009d885ab2ccbe82382803bb8628b3acca1ace7ea81226d0c012c0704679b821002202d500fdb5ae9ee81e0f83b19a0fdeeb6dca7b127c8fccca2aa93983710e537944121026495a1748fa3e66b687c290264417a21da7c8cce4929a9a7c8bd4962d09d45cfffffffffc6e1395b8de236234d79355c2c39321fa3cf578ed153584449ada1539c94aec7020000006a47304402204597ce375af09b90a155045ad9be03b291430a3fc2c7a0f53bd9d6201136f2f502207658c21489808596d458255007bedadf0474fb1e151cf7279cf7ceba77d6958b41210320753270c0e3452fa1f6f36547fa5af18bc4a0c749e091b73745f788589ba899ffffffffb8aedaf44cf934f9503138a75d4b89a7357c90c32e9211a76dbb35b847fbd1ce010000006a473044022079d20d7e2fdf7b6bbffd58c4035e85ace820890191fcbaf96979a1eeba6af151022025db7269544f6fe551b84361bd024056d66fe1946c6394ed0462a0aeceeb57a741210228caa0375911abc16786c236098417554aa181f772cfe957c80f4dc66d0323a0ffffffff2e7d3e84dfdff67a4cd1689119ef313d12af70b81a81f6264eefc3c823953ef5020000006b483045022100df92b115ce89d6b014e3928ff76645f94247f3be122c8381282b7224435e0dce022077bd16ba1c693563be086c27ddaed6cfb0f96b826b5a75f4c8aedf0626bf289f41210226ba49b55aa40618a1d2c9d8f4a0b5eaec45f7c4684ededd35af477d294c2dcfffffffff8b261251b877c30edec39ff531aee166e34a2572f4753f4c37cdf2699ac85ff9020000006a473044022056a6b57f7a63cdd32f2226ae324207f9b75dcf311f6cc4845c2feb3593d724bf02202f48b07179e3a6d3cbb389d2f2e388aa7cbdaec54f580108191bbc1f6f9367ec412103eb84dc96fe0060ac20cd1e6683f09fa407aa980b227d44e4ad4f7743b752eef6ffffffff0268a40000000000001976a914c4c7e9882137081586d49175cca816bd9fad2f3688ac67780900000000001976a91405fb1417a672c1c52394ad594b1700f418f46a4888ac00000000"
    }, 0)
    await run("count", ["utxo"], 0)
    await run("count", ["all"], 0)
  }
};
(async () => {
  await Test.clone()
  await Test.add()
  await Test.read()
})();
